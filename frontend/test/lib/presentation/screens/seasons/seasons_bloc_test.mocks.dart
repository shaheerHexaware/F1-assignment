// Mocks generated by Mockito 5.4.6 from annotations
// in f1_app/test/lib/presentation/screens/seasons/seasons_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:f1_app/data/data_repository.dart' as _i2;
import 'package:f1_app/domain/models/race/race.dart' as _i5;
import 'package:f1_app/domain/models/season/season.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataRepository extends _i1.Mock implements _i2.DataRepository {
  MockDataRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Season>> getSeasonsWithChampions({int? from, int? to}) =>
      (super.noSuchMethod(
            Invocation.method(#getSeasonsWithChampions, [], {
              #from: from,
              #to: to,
            }),
            returnValue: _i3.Future<List<_i4.Season>>.value(<_i4.Season>[]),
          )
          as _i3.Future<List<_i4.Season>>);

  @override
  _i3.Future<List<_i5.Race>> getSeasonRaces(int? year) =>
      (super.noSuchMethod(
            Invocation.method(#getSeasonRaces, [year]),
            returnValue: _i3.Future<List<_i5.Race>>.value(<_i5.Race>[]),
          )
          as _i3.Future<List<_i5.Race>>);
}
